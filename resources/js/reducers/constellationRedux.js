import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import * as api from "../apis/constellationAPI";

const initialState = {
    status: "done",
    datas: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const updateAsync = createAsyncThunk(
//     "constellation/update",
//     async data => {
//         const response = await api.login(data);
//         return response.data;
//     }
// );

export const getAsync = createAsyncThunk("constellation/get", async data => {
    const response = await api.signup(data);
    return response.data;
});

export const constellationSlice = createSlice({
    name: "constellation",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder
            .addCase(getAsync.pending, state => {
                state.status = "loading";
            })
            .addCase(getAsync.fulfilled, (state, action) => {
                state.status = "done";
                state.datas = action.payload.datas;
            })
            .addCase(getAsync.rejected, () => {
                alert("發生錯誤, 將重新整理畫面");
            });
    }
});

// export const { loginAsync, logoutAsync } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectConstellationStatus = state => state.userinfo.status;
export const selectConstellationDatas = state => state.constellationDatas;

export default constellationSlice.reducer;
