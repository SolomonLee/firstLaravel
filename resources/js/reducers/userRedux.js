import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import * as api from "../apis/userAPI";

const initialState = {
    type: 1,
    status: "done",
    name: "遊客",
    birth: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk("user/Login", async (data) => {
    const response = await api.login(data);
    return response.data;
});
export const signupAsync = createAsyncThunk("user/Signup", async (data) => {
    const response = await api.signup(data);
    return response.data;
});

export const logoutAsync = createAsyncThunk("user/Logout", async () => {
    const response = await api.logout();
    return response.data;
});

export const userSlice = createSlice({
    name: "user",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginAsync.pending, (state) => {
                state.status = "onlogin";
            })
            .addCase(loginAsync.fulfilled, (state, action) => {
                state.status = "done";
                state.name = action.payload.name;
                state.type = action.payload.type;
                state.birth = action.payload.birth;
            })
            .addCase(loginAsync.rejected, () => {
                alert("發生錯誤, 將重新整理畫面");
            })
            .addCase(logoutAsync.pending, (state) => {
                state.status = "onlogout";
            })
            .addCase(logoutAsync.fulfilled, (state, action) => {
                state.status = "done";
                state.name = action.payload.name;
                state.type = action.payload.type;
                state.birth = action.payload.birth;
            })
            .addCase(logoutAsync.rejected, () => {
                alert("發生錯誤, 將重新整理畫面");
            });
    },
});

// export const { loginAsync, logoutAsync } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserType = (state) => state.userinfo.type;
export const selectUserStatus = (state) => state.userinfo.status;
export const selectUserBirth = (state) => state.userinfo.birth;
export const selectUserName = (state) => state.userinfo.name;

export default userSlice.reducer;
